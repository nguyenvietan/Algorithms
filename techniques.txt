					*TECHNICAL SKILLS to REMEMBER*

List all combinations

Java Heap, Comparator, ...
------------------------
Java's key libraries

Sorting:
	Arrays.sort(int[]) // more? 


Maps:
	containsKey()
	keySet()
	putIfAbsent(key, val)
		eg.	map.putIfAbsent(arr[i], new ArrayList<>());
            map.get(arr[i]).add(i);
Lists:
	addAll(List<>)
	add(int)
	remove(list.size()-1)
	List<List<Integer>> list; list.add(new ArrayList<>(list2));
	list to array: list.toArray(new int[list.size][])

Queue:
	Queue<Integer> q = new LinkedList<>();
	q.isEmpty(), q.poll(), q.add()

Priority Queues:

	// constructors with comparators
	PriorityQueue<T> pq = new PriorityQueue<>(new ComparatorE());
	public class ComparatorE<T> implements Comparator {
		public int compare(T a, T b) {
			// compare strings in lexicographical order:
			// 		a.name.compareTo(b.name); // eg. "abc" is before "xyz"
			// compare integers:
			// 		a.score - b.score // eg. 1 is before 2
		}
	}

	// constructors with lambda functions
	PriorityQueue<T> pq = new PriorityQueue<>((a, b) -> (a.score == b.score) ? a.name.compareTo(b.name) : b.score - a.score);

    // Shortest paths
    int[] dist = new int[n];
    Arrays.fill(dist, oo);
    PriorityQueue<int[]> pq = new PriorityQueue<>((u, v) -> (u[1] - v[1])); // (v, weight)
    pq.add(new int[]{0, dist[0] = 0});
    pq.add(new int[]{firstPerson, dist[firstPerson] = 0});

Dequeue (faster than LinkedList/Stack as a queue)
	Deque<Character> dq = new ArrayDeque<>();
	+ methods: add()/addLast(), addFirst(), poll()/removeFirst(), removeLast()
	+ iteration:
		Iterator it = dq.descendingIterator();
		// or: Iterator it = dq.iterator();
		while (it.hasNext()) {
			Character ch = (Character) it.next();
		}

#Techniques to remember

BIT MANIPULATION
	Count the number of bit 1s of an integer
		int count1bits(int x) {
			int cnt = 0;
			while (x > 0) {
				if ((x&1) != 0) cnt++;
				x >>= 1;
			}
			return cnt;
		}

	Or better way:
		int count1bits(int x) {
			int cnt = 0;
			while (x != 0) {
				cnt++;
				x = x & (x-1);
			}
			return cnt;
		}

LOWER BOUND, UPPER BOUND of an sorted array
	lower bound: return the index of the first num >= value
	upper bound: return the index of the first num > value
		0 1 2 3 4 5 5 5 5 7 8 9
				  ^       ^
				  lower   upper

	int lowerBound(int[] a, int val) {
		int	l = 0, r = a.length, m;
		while (l < r) {
			m = (l+r)/2;
			if (a[m] < val) l = m+1;
			else r = m;			
		}
		return r;
	}

	int upperBound(int[] a, int val) {
		int	l = 0, r = a.length, m;
		while (l < r) {
			m = (l+r)/2;
			if (a[m] <= val) l = m+1; // key difference
			else r = m;
		}
		return r;
	}


QUICK SELECT
	// TODO: review

==================================================
			FUNDAMENTAL DATASTRUCTURES
=======
PRIME DECOMPOSE
	List<Integer> primeDecompose(int n) {
		List<Integer> res = new ArrayList<>();
		int factor = 2;
		while (n >= factor*factor) {
			if (n%factor == 0) {
				res.add(factor);
				n /= factor;
			} else factor++;
		}
		res.add(num); // don't forget
		return res;				
	}
	Exercises:
		+ Largest Component Size by Common Factor	

# Basic data structures

+ Disjoint Set Union

	class UnionFind {
		private int[] parent, ranks, sizes;
		private int nSets;
		public UnionFind(int n) {
			this.parent = new int[n];
			this.ranks = new int[n];
			this.sizes = new int[n];
			this.nSets = n;
			for (int i = 0; i < n; ++i) { this.parent[i] = i; this.ranks[i] = 0; this.sizes[i] = 1; }
		}
		public void union(int i, int j) {
			int pi = find(i), pj = find(j);
			if (pi == pj) return;
			if (ranks[pi] == ranks[pj]) {
				parent[pj] = pi;
				sizes[pi] += sizes[pj];
				ranks[pi]++;
			} else if (ranks[pi] < ranks[pj]) {
				parent[pi] = pj;
				sizes[pj] += sizes[pi];
			} else {
				parent[pj] = pi;
				sizes[pi] += sizes[pj];
			}
			nSets--;
		}
		public int find(int i) { return i == parent[i] ? i : (parent[i] = find(parent[i])); }
		public int getSizeOfSet(int i) { return sizes[find(i)]; }
		public int getNSets() { return nSets; }
	}

+ Priority Queue (Java)

+ Binary Search Tree

+ Trie
	class Trie {
		private class Node() {
			Node[] next;
			boolean isEnd;
			Node() { this.next = new Node[26]; this.isEnd = false; }
		}
		private Node root;

		public Trie(String[] words) {
			root = new Node();
			for (String word : words) {
				Node cur = root;
				for (char ch : word) {
					int idx = ch - 'a'; // all chars are lowercase
					if (cur.next[idx] == null) cur.next[idx] = new Node();
					cur = cur.next[idx];
				}
				cur.isEnd = true;
			}
		}
	}